@page "/shop"
@rendermode InteractiveServer
@using ShopModel = TheDuelX.Shared.Models.Shop
@using TheDuelX.Shared.Models
@using TheDuelX.Data
@using Microsoft.EntityFrameworkCore
@inject GameDbContext DbContext
@inject IJSRuntime JSRuntime

<PageTitle>Loja - The Duel X</PageTitle>

<div class="shop-container">
    <h1 class="shop-title">üè™ Loja de Cartas</h1>
    
    <div class="player-info">
        <div class="coins">üí∞ @playerCoins Moedas</div>
        <div class="player-selector">
            <label>Jogador:</label>
            <select @onchange="OnPlayerChanged">
                <option value="0">Selecionar Jogador</option>
                @foreach (var player in players)
                {
                    <option value="@player.Id">@player.Username</option>
                }
            </select>
        </div>
    </div>

    @if (currentPlayer != null)
    {
        <div class="shop-items">
            @foreach (var shop in shops)
            {
                <div class="shop-section">
                    <h2>@shop.Name</h2>
                    <p>@shop.Description</p>
                    
                    <div class="items-grid">
                        @foreach (var item in shop.Items)
                        {
                            <div class="shop-item">
                                <div class="item-header">
                                    <h3>@item.Name</h3>
                                    <div class="price">üí∞ @item.Price</div>
                                </div>
                                <p class="item-description">@item.Description</p>
                                
                                <div class="purchase-section">
                                    <input type="number" min="1" max="10" @bind="purchaseQuantities[item.Id]" class="quantity-input" />
                                    <button class="btn btn-primary" 
                                            @onclick="() => PurchaseItem(item.Id)" 
                                            disabled="@(playerCoins < item.Price * purchaseQuantities.GetValueOrDefault(item.Id, 1))">
                                        Comprar
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="no-player">
            <p>Selecione um jogador para acessar a loja</p>
            <button class="btn btn-secondary" @onclick="CreateTestPlayer">Criar Jogador de Teste</button>
        </div>
    }

    @if (recentPurchases.Any())
    {
        <div class="recent-purchases">
            <h3>Compras Recentes</h3>
            @foreach (var purchase in recentPurchases)
            {
                <div class="purchase-item">
                    <div class="purchase-header">
                        <span>@purchase.ShopItem.Name</span>
                        <span>-@purchase.TotalPrice üí∞</span>
                    </div>
                    <div class="received-cards">
                        @foreach (var card in purchase.ReceivedCards)
                        {
                            <span class="received-card">@card.Card.Name x@card.Quantity</span>
                        }
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<ShopModel> shops = new();
    private List<Player> players = new();
    private Player? currentPlayer;
    private int playerCoins = 0;
    private Dictionary<int, int> purchaseQuantities = new();
    private List<Purchase> recentPurchases = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        shops = await DbContext.Shops
            .Include(s => s.Items)
            .ThenInclude(i => i.Cards)
            .ThenInclude(c => c.Card)
            .Where(s => s.IsActive)
            .ToListAsync();

        players = await DbContext.Players.ToListAsync();

        foreach (var shop in shops)
        {
            foreach (var item in shop.Items)
            {
                if (!purchaseQuantities.ContainsKey(item.Id))
                {
                    purchaseQuantities[item.Id] = 1;
                }
            }
        }

        StateHasChanged();
    }

    private async Task OnPlayerChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int playerId) && playerId > 0)
        {
            currentPlayer = await DbContext.Players.FindAsync(playerId);
            playerCoins = currentPlayer?.Coins ?? 0;
            await LoadRecentPurchases(playerId);
        }
        else
        {
            currentPlayer = null;
            playerCoins = 0;
            recentPurchases.Clear();
        }
        StateHasChanged();
    }

    private async Task LoadRecentPurchases(int playerId)
    {
        recentPurchases = await DbContext.Purchases
            .Include(p => p.ShopItem)
            .Include(p => p.ReceivedCards)
            .ThenInclude(rc => rc.Card)
            .Where(p => p.PlayerId == playerId)
            .OrderByDescending(p => p.PurchasedAt)
            .Take(5)
            .ToListAsync();
    }

    private async Task PurchaseItem(int shopItemId)
    {
        if (currentPlayer == null) return;

        var shopItem = await DbContext.ShopItems.FirstOrDefaultAsync(si => si.Id == shopItemId);
        if (shopItem == null) return;

        var quantity = purchaseQuantities.GetValueOrDefault(shopItemId, 1);
        var totalPrice = shopItem.Price * quantity;

        if (currentPlayer.Coins < totalPrice)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Moedas insuficientes!");
            return;
        }

        var purchase = new Purchase
        {
            PlayerId = currentPlayer.Id,
            ShopItemId = shopItemId,
            Quantity = quantity,
            TotalPrice = totalPrice,
            PurchasedAt = DateTime.UtcNow,
            ReceivedCards = new List<PurchasedCard>()
        };

        var allCards = await DbContext.Cards.ToListAsync();
        var random = new Random();
        var cardsToGive = quantity * 3; 

        var cardCounts = new Dictionary<int, int>();

        for (int i = 0; i < cardsToGive; i++)
        {
            var randomCard = allCards[random.Next(allCards.Count)];
            
            purchase.ReceivedCards.Add(new PurchasedCard
            {
                CardId = randomCard.Id,
                Quantity = 1
            });

            if (cardCounts.ContainsKey(randomCard.Id))
            {
                cardCounts[randomCard.Id]++;
            }
            else
            {
                cardCounts[randomCard.Id] = 1;
            }
        }

        foreach (var cardCount in cardCounts)
        {
            var playerCard = await DbContext.PlayerCards
                .FirstOrDefaultAsync(pc => pc.PlayerId == currentPlayer.Id && pc.CardId == cardCount.Key);

            if (playerCard != null)
            {
                playerCard.Quantity += cardCount.Value;
            }
            else
            {
                DbContext.PlayerCards.Add(new PlayerCard
                {
                    PlayerId = currentPlayer.Id,
                    CardId = cardCount.Key,
                    Quantity = cardCount.Value,
                    AcquiredAt = DateTime.UtcNow
                });
            }
        }

        currentPlayer.Coins -= totalPrice;
        playerCoins = currentPlayer.Coins;

        DbContext.Purchases.Add(purchase);
        await DbContext.SaveChangesAsync();

        await JSRuntime.InvokeVoidAsync("alert", $"Compra realizada! Voc√™ recebeu {cardsToGive} cartas!");
        
        await LoadRecentPurchases(currentPlayer.Id);
        StateHasChanged();
    }

    private async Task CreateTestPlayer()
    {
        var player = new Player
        {
            Username = $"Jogador{DateTime.Now.Ticks % 10000}",
            Email = $"player{DateTime.Now.Ticks % 10000}@test.com",
            Coins = 1000,
            CreatedAt = DateTime.UtcNow
        };

        DbContext.Players.Add(player);
        await DbContext.SaveChangesAsync();

        await LoadData();
        await JSRuntime.InvokeVoidAsync("alert", $"Jogador {player.Username} criado com 1000 moedas!");
    }
}

<style>
    .shop-container {
        padding: 40px 20px;
        max-width: 1200px;
        margin: 0 auto;
        background: linear-gradient(135deg, #2E8B57 0%, #228B22 100%);
        min-height: 100vh;
        color: white;
    }

    h1 {
        text-align: center;
        font-size: 2.5rem;
        margin-bottom: 20px;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }

    .player-currency {
        text-align: center;
        margin-bottom: 40px;
    }

    .currency-display {
        background: rgba(255,255,255,0.1);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255,255,255,0.2);
        border-radius: 50px;
        padding: 15px 30px;
        display: inline-flex;
        align-items: center;
        gap: 10px;
        font-size: 1.2rem;
        font-weight: bold;
    }

    .currency-icon {
        font-size: 1.5rem;
    }

    .currency-amount {
        color: #FFD700;
        font-size: 1.5rem;
    }

    .shop-items {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 30px;
        margin-bottom: 40px;
    }

    .shop-item {
        background: rgba(255,255,255,0.1);
        backdrop-filter: blur(10px);
        border: 2px solid rgba(255,255,255,0.2);
        border-radius: 20px;
        padding: 25px;
        text-align: center;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        position: relative;
        overflow: hidden;
    }

    .shop-item:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 30px rgba(0,0,0,0.3);
    }

    .shop-item.featured {
        border-color: #FFD700;
        box-shadow: 0 0 20px rgba(255, 215, 0, 0.3);
    }

    .shop-item.legendary {
        border-color: #FF6B35;
        box-shadow: 0 0 25px rgba(255, 107, 53, 0.4);
    }

    .featured-badge {
        position: absolute;
        top: -10px;
        right: -10px;
        background: #FFD700;
        color: #333;
        padding: 5px 15px;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: bold;
        transform: rotate(15deg);
    }

    .legendary-glow {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(45deg, transparent 30%, rgba(255, 107, 53, 0.1) 50%, transparent 70%);
        animation: shimmer 3s infinite;
        pointer-events: none;
    }

    .item-image {
        font-size: 4rem;
        margin-bottom: 15px;
    }

    .shop-item h3 {
        font-size: 1.5rem;
        margin-bottom: 10px;
        color: #FFD700;
    }

    .item-description {
        font-size: 0.9rem;
        opacity: 0.8;
        margin-bottom: 15px;
        line-height: 1.4;
    }

    .item-contents {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        justify-content: center;
        margin-bottom: 20px;
    }

    .content-tag {
        background: rgba(0,0,0,0.3);
        padding: 4px 10px;
        border-radius: 12px;
        font-size: 0.8rem;
        border: 1px solid;
    }

    .content-tag.common { border-color: #95a5a6; color: #95a5a6; }
    .content-tag.uncommon { border-color: #2ecc71; color: #2ecc71; }
    .content-tag.rare { border-color: #3498db; color: #3498db; }
    .content-tag.epic { border-color: #9b59b6; color: #9b59b6; }
    .content-tag.legendary { border-color: #f39c12; color: #f39c12; }
    .content-tag.spell { border-color: #e74c3c; color: #e74c3c; }

    .item-price {
        font-size: 1.8rem;
        font-weight: bold;
        margin-bottom: 20px;
        color: #FFD700;
    }

    .btn {
        padding: 12px 30px;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: bold;
        text-decoration: none;
        transition: all 0.3s ease;
        cursor: pointer;
        display: inline-block;
        width: 100%;
        margin-bottom: 10px;
    }

    .btn-primary {
        background: linear-gradient(45deg, #FF6B6B, #FF8E53);
        color: white;
    }

    .btn-accent {
        background: linear-gradient(45deg, #FFE066, #FF6B35);
        color: #333;
    }

    .btn-legendary {
        background: linear-gradient(45deg, #FF6B35, #F7931E);
        color: white;
        box-shadow: 0 0 15px rgba(255, 107, 53, 0.5);
    }

    .btn-secondary {
        background: linear-gradient(45deg, #4ECDC4, #44A08D);
        color: white;
    }

    .btn:hover {
        transform: translateY(-2px);
        filter: brightness(1.1);
    }

    .action-section {
        text-align: center;
        display: flex;
        gap: 20px;
        justify-content: center;
        flex-wrap: wrap;
    }

    .action-section .btn {
        width: auto;
        padding: 15px 30px;
        font-size: 1.1rem;
    }
</style>